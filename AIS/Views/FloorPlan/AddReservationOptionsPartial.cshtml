@model AIS.Models.ReservationVM
@{
    var maxAvailCovers = (int)ViewBag.MaxAvailCovers;
}

@using (Ajax.BeginForm(
    "UpdateAddReservationOptions",
    "FloorPlan",
    null,
    new AjaxOptions
    {
        HttpMethod = "GET",
        UpdateTargetId = "AdResDDL",
        OnBegin = "{" +
        "   if(MergeTableService != null){" +
        "       MergeTableService.SelectedTablesForMerging = [];" +
        "       MergeTableService.AvailableTablesForMerging = [];" +
        "   }" +
        "}",
        OnSuccess = "{" +
                    "   $('#AdResUpdateForm').removeData('unobtrusiveValidation');" +
                    "   $.validator.unobtrusive.parse('#AdResUpdateForm');" +
                    "   AddReservationTimeChange('#AdResDDL #ddlTime', true);" +
                    "}"
    },
    new
    {
        @id = "AdResUpdateForm"
    }))
{
    @Html.HiddenFor(m => m.ReservationId)
    @Html.Hidden("resDate", Model.resDate.ToString("dddd, dd MMM, yy"), new { @onchange = "$(this).parents('form').submit();" })
    @Html.HiddenFor(m => m.Status)
    @Html.HiddenFor(m => m.Covers, new { @onchange = "$(this).parents('form').submit();" })
    @Html.HiddenFor(m => m.time, new { @onchange = "$(this).parents('form').submit();" })
    @Html.HiddenFor(m => m.Duration)
    @Html.HiddenFor(m => m.ShiftId)
    @Html.HiddenFor(m => m.tableIdd, new { @onchange = "$(this).parents('form').submit();" })
    @Html.HiddenFor(m => m.FloorPlanId)
    @Html.Hidden("considerFloor", false)
    @Html.Hidden("isMerging", false)
    @Html.HiddenFor(m => m.enableMerging, new { @onchange = "$(this).parents('form').submit();" })
}
<div class="row">
    <div class="left-s">
        <label>
            Covers <span>*@Html.ValidationMessageFor(m => m.Covers)</span>
        </label>
        <div class="select-main">
            @Html.DropDownList(
                "ddlCover",
                new SelectList(ViewBag.CoverList, "Value", "Text", Model.Covers),
                new
                {
                    @onchange = "{" +
                                "   $('#AdResUpdateForm #Covers').val(this.value).change(); " +
                                "   $('#AdResAddiUpdateForm #Covers').val(this.value).change();" +
                        //"   OpenMergeTablePopUpIfRequired(this);" +
                                "   EnableMergeTableIfRequired(this);" +
                                "}"
                })
        </div>
    </div>
    <div class="right-s">
        <label>
            Time <span>*@Html.ValidationMessageFor(m => m.time)</span>
        </label>
        <div class="select-main">
            @Html.DropDownList(
                "ddlTime",
                new SelectList(ViewBag.TimeList, "Value", "Text", Model.time),
                new
                {
                    @onchange = "{" +
                                "   $('#AdResUpdateForm #time').val(this.value).change(); " +
                                "   $('#AdResAddiUpdateForm #time').val(this.value).change();" +
                                "}"
                })
        </div>
    </div>
</div>
<div id="tblSelectOption">
    @if (Model.Covers <= maxAvailCovers)
    {
        <label>
            Table <span>*@Html.ValidationMessageFor(m => m.tableIdd)</span>
        </label>
        <div class="select-main s-table">
            @Html.DropDownList(
        "ddlTable",
        new SelectList(ViewBag.TableList, "Id", "Name", Model.tableIdd),
        new
        {
            @onchange = "{" +
                        "   $('#AdResUpdateForm #tableIdd').val(this.value).change(); " +
                        "   $('#AdResAddiUpdateForm #tableIdd').val(this.value).change();" +
                        "   $('#AdResAddiUpdateForm').submit();" +
                        "}"
        })
        </div>
        <p>
            There are <span>
                @(ViewBag.TableCount)
                tables
            </span> available for this time and group size (excluding table combinations).
        </p>
    }
    else
    {
        <p>
            @if (ViewBag.SelectedTables != null)
            {
                var minCovers = ((List<AISModels.FloorTable>)ViewBag.SelectedTables).Sum(t => t.MinCover);
                var maxCovers = ((List<AISModels.FloorTable>)ViewBag.SelectedTables).Sum(t => t.MaxCover);

                <span>
                    @Html.Raw(string.Join(" + ", ((List<AISModels.FloorTable>)ViewBag.SelectedTables).Select(t => t.TableName + " (" + t.MinCover + "/" + t.MaxCover + " )")))
                    @Html.Raw("</br>Total MinCovers = " + minCovers + " </br>Total MaxCovers = " + maxCovers)
                </span>
            }
            else
            {
                <span>
                    Click on available tables on floor to merge.
                </span>
            }
        </p>

        using (Ajax.BeginForm(
        ((Model.ReservationId > 0 && Model.MergeTableId.HasValue && Model.MergeTableId.Value > 0) ? "UpdateMergedTableNew" : "AddMergedTableNew"),
        "MergeTable",
        null,
        new AjaxOptions
        {
            HttpMethod = "POST",
            OnSuccess = "{" +
                        "   console.log(data);" +
                        "   if (data.Status == 'Success') {" +
                        "       UpdateAddReservationFormValues();" +
                        "       $('#AdResSaveForm #MergeTableId').val(data.ItemId);" +
                        "       if(data.PIN != null){" +
                        "           $('#AdResSaveForm #PIN').val(data.PIN);" +
                        "       }" +
                        "       $('#AdResSaveForm').submit();" +
                //"       if ($('#AdResSaveForm').valid()) {" +
                //"           PromptForPIN('#AdResSaveForm', SaveReservation());" +
                //"       }" +
                //"       else {" +
                //"           alert('Please fill the required fields before saving reservation.');" +
                //"       }" +
                        "   }" +
                        "   else {" +
                        "       alert(data.Message);" +
                        "   }" +
                        "}",
            OnFailure = "alert('An error occured while merging table.');"
        },
        new
        {
            @id = "MergeTableForm"
        }
        ))
        {
            @Html.Hidden("MergedFloorTableId", Model.MergeTableId.HasValue ? Model.MergeTableId.Value : 0)
            @Html.Hidden("covers", Model.Covers)
            @Html.Hidden("MobileNumber", Model.MobileNumber)
            @Html.Hidden("PIN")
            <div id="selectTablesDiv">
                @if (ViewBag.SelectedTables != null)
                {
                    foreach (var value in (List<AISModels.FloorTable>)ViewBag.SelectedTables)
                    {
                        @Html.Hidden("selectedTables", value.FloorTableId)
                    }
                }
            </div>
        }
    }
</div>
<script type="text/javascript">
    maxCoverLimit = @(maxAvailCovers);
    $(function(){
        @if ((bool)ViewBag.IsAutoMerge) {
        <text>
        $('#enableMergeBtn').hide();
        </text>
        }
        else {
        <text>
        $('#enableMergeBtn').show();
        </text>
        }
    });
</script>