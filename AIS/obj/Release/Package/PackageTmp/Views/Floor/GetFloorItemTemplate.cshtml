@model AISModels.FloorTable
@switch (Model.Shape.ToUpper())
{
    case "ROUND":
        {
    @Html.Partial("~/Views/Floor/RoundTableTemplate.cshtml", Model)
            break;
        }

    case "SQUARE":
        {
    @Html.Partial("~/Views/Floor/SquareTableTemplate.cshtml", Model)
            break;
        }

    case "RECTANGLE":
        {
    @Html.Partial("~/Views/Floor/RectangleTableTemplate.cshtml", Model)
            break;
        }

    case "RANDOM":
        {
    @Html.Partial("~/Views/MergeTable/MergedTableTemplate.cshtml", Model)
            break;
        }

    default:
        {
            var isSelected = ((ViewBag.IsSelected != null) ? (ViewBag.IsSelected) : false);
            var isTemporary = ((ViewBag.IsTemp != null) ? (ViewBag.IsTemp) : false);
            
    <div id="@(Model.HtmlId)" class="table-main table item @(isSelected ? "secHover" : string.Empty)" style="left: @(Model.TLeft); top: @(Model.TTop);">
        <div class="tblRotate" style="transform: rotate(@(Model.Angle)deg);">
            <div class="rotate" @(isSelected ? null : Html.Raw("style=\"display: none;\""))>
                <a title="@(Model.HtmlId)" href="javascript:void(0);" class="rotateAnti"></a><a title="@(Model.HtmlId)" href="javascript:void(0);" class="dltItem"
                onclick="DeleteTable(@(Model.FloorTableId), this);">X</a><a title="@(Model.HtmlId)" href="javascript:void(0);"
                    class="rotateClock"> </a>
            </div>
            <img alt="" src="/images/@(Model.Shape).png" />
        </div>
        @using (Ajax.BeginForm(
            (isTemporary ? "UpdateTempItem" : "UpdateFloorItem"),
            "FloorItem",
            new AjaxOptions
            {
                HttpMethod = "POST",
                OnSuccess = "console.log(data);"
            }))
        {
            @Html.HiddenFor(m => m.FloorTableId)
            @Html.HiddenFor(m => m.FloorPlanId)
            @Html.HiddenFor(m => m.SectionId)
            @Html.HiddenFor(m => m.TableName)
            @Html.HiddenFor(m => m.HtmlId)
            @Html.HiddenFor(m => m.Shape)
            @Html.HiddenFor(m => m.Size)
            @Html.HiddenFor(m => m.MinCover)
            @Html.HiddenFor(m => m.MaxCover)
            @Html.HiddenFor(m => m.Angle)
            @Html.HiddenFor(m => m.TTop)
            @Html.HiddenFor(m => m.TLeft)
        }
    </div>
        break;
        }
}